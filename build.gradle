plugins {
	id 'java'
	//id 'checkstyle'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.ec4j.editorconfig' version '0.0.3'
	
	id 'java-library'
	id 'maven-publish'
	id("com.jfrog.artifactory") version "5.2.0"
}

group = 'com.mypetmanager'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
  
	//mavenCentral()
	mavenLocal()
}

ext {
 set('springCloudVersion', "2022.0.3")
}

dependencies {
  
	//spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'mysql:mysql-connector-java:8.0.23'
	implementation 'org.apache.commons:commons-lang3' 
	implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.0.1'
	
	// AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	
	// reflection
	implementation 'org.reflections:reflections:0.10.2'
	
	// queryDsl
  implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
  annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
  annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
  annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    
   // lombok
   compileOnly 'org.projectlombok:lombok:1.18.30'
   annotationProcessor 'org.projectlombok:lombok:1.18.30'

   // modelMapping mapstruct
   implementation 'org.modelmapper:modelmapper:3.2.0'
   implementation 'org.mapstruct:mapstruct:1.4.2.Final'
   annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
	
	// tracing
    //	implementation 'io.opentelemetry:opentelemetry-sdk-common'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
    
    implementation('io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:2.1.0')
    implementation("io.opentelemetry:opentelemetry-api")
    implementation("io.opentelemetry:opentelemetry-sdk")
    implementation("io.opentelemetry:opentelemetry-exporter-logging")
    
    //alpha modules
    implementation("io.opentelemetry.semconv:opentelemetry-semconv")
  	//runtimeOnly 'io.micrometer:micrometer-registry-otlp'
	
 	//httpClient
  implementation 'org.apache.httpcomponents.client5:httpclient5'
	implementation 'com.google.protobuf:protobuf-java'
	
	// TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.30' // 테스트를 위한 세팅
  testImplementation 'org.projectlombok:lombok:1.18.30' // 테스트를 위한 세팅

}

publishing {
  repositories {
         maven {
            name = "testRepo"
            credentials {
                  username = "admin"
                  password = "Malife#2"
              }
            url = uri('http://localhost:8082/artifactory/my-local-repos/')
            allowInsecureProtocol true
        }
        
        publications {
          myLibrary(MavenPublication) {
            groupId = 'com.mypetmanager'
            artifactId = 'publish-sample'
            from components.java
            
            artifact bootJar
      
            versionMapping {
              usage('java-api'){
                fromResolutionOf('runtimeClasspath')
              }
              usage('java-runtime'){
                fromResolutionResult()
              }
            } // end of versionMapping
          } // end of myLibrary
        }// end of publications
    }
}

dependencyManagement {
 imports {
  mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  mavenBom("io.opentelemetry:opentelemetry-bom:1.34.1")
  mavenBom("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:2.0.0-alpha")
 }
}

tasks.named('test') {
  useJUnitPlatform()
}

tasks.named('bootBuildImage') {
  builder = 'paketobuildpacks/builder-jammy-base:latest'
}
 
// check.dependsOn editorconfigCheck

